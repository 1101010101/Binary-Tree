typedef int nodeEntry;

struct Bnode		//二叉树节点结构
{	
	nodeEntry data;	//数据成员
	Bnode *left;	//左子树
	Bnode *right;	//右子树
};

class BinTree
{
	Bnode *root;
	void recursivePreorder(Bnode *x);
	void recursiveInorder(Bnode *x);
	void recursivePostorder(Bnode *x);
public:
	BinTree();
	~BinTree();
	void preorder();
	void inorder();
	void postorder();
};

BinTree::BinTree()
{
	root = NULL;
}

BinTree::~BinTree()
{
	delete root;
}

void BinTree::preorder()			//本函数对二叉树进行前序遍历，使用辅助函数recursivePreorder
{
	recursivePreorder(root);
}

void BinTree::recursivePreorder(Bnode *subRoot)	//subRoot要么为空，要么指向一棵子二叉树
{
	if (subRoot != NULL)
	{
		cout << subRoot->data << " ";
		recursivePreorder(subRoot->left);
		recursivePreorder(subRoot->right);
	}
}

void BinTree::inorder()				//本函数对二叉树进行中序遍历，使用辅助函数recursiveInorder
{
	recursiveInorder(root);
}

void BinTree::recursiveInorder(Bnode *subRoot)//subRoot要么为空，要么指向一棵子二叉树
{
	if (subRoot != NULL)
	{
		recursiveInorder(subRoot->left);
		cout << subRoot->data << " ";
		recursiveInorder(subRoot->right);
	}
}

void BinTree::postorder()			//本函数对二叉树进行后序遍历，使用辅助函数recursivePostorder
{
	recursivePostorder(root);
}

void BinTree::recursivePostorder(Bnode *subRoot)//subRoot要么为空，要么指向一棵子二叉树
{
	if (subRoot != NULL)
	{
		recursivePostorder(subRoot->left);
		recursivePostorder(subRoot->right);
		cout << subRoot->data << " ";
	}
}
